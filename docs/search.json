[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 gglobalclocks authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gina Reynolds. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Reynolds G (2024). gglobalclocks: Create Wall Clocks Local Times Locations Around World. R package version 0.0.0.9000.","code":"@Manual{,   title = {gglobalclocks: Create a Wall of Clocks with the Local Times for Locations Around the World},   author = {Gina Reynolds},   year = {2024},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"gglobalclocks","dir":"","previous_headings":"","what":"Create a Wall of Clocks with the Local Times for Locations Around the World","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"draw beautiful ‘wall’ clocks local times around world? Well, gglobalclocks lets ! worked wall clocks thinking might help schedule virtual meetings participant lots different time zones. beautiful wall clocks help schedule global meetings? turns , experience, really! gglobalclocks also utilities building dataframes locations local times found helpful multi-timezone scheduling.","code":"library(tidyverse) gglobalclocks:::date_time_tz_to_tzs() |>    gglobalclocks:::local_tzs_df_collapse() |>   gglobalclocks:::gglobalclocks() +      aes(local_time = local_time) +      gglobalclocks:::stamp_clockface() +      gglobalclocks:::geom_clock_hands() +      facet_wrap(~str_wrap(locations, 20)) tz_targets <- c(\"US/Mountain\",\"US/Eastern\",\"US/Pacific\", \"Europe/Paris\", \"Europe/Amsterdam\", \"America/Sao_Paulo\", \"America/Santiago\", \"Australia/Melbourne\", \"Europe/Vienna\", \"Europe/London\", \"Asia/Seoul\")  gglobalclocks:::date_time_tz_to_tzs(   from_date_time = \"2024-06-27 12:00:00\",   from_tz = \"Europe/London\",   to_tz = tz_targets) #> # A tibble: 11 × 6 #>    tz       local_time_date_utc local_time local_date local_wday local_wday_date #>    <chr>    <dttm>              <time>     <date>     <ord>      <chr>           #>  1 US/Paci… 2024-06-27 04:00:00 04:00      2024-06-27 Thu        Thu, Jun 27     #>  2 US/Moun… 2024-06-27 05:00:00 05:00      2024-06-27 Thu        Thu, Jun 27     #>  3 America… 2024-06-27 07:00:00 07:00      2024-06-27 Thu        Thu, Jun 27     #>  4 US/East… 2024-06-27 07:00:00 07:00      2024-06-27 Thu        Thu, Jun 27     #>  5 America… 2024-06-27 08:00:00 08:00      2024-06-27 Thu        Thu, Jun 27     #>  6 Europe/… 2024-06-27 12:00:00 12:00      2024-06-27 Thu        Thu, Jun 27     #>  7 Europe/… 2024-06-27 13:00:00 13:00      2024-06-27 Thu        Thu, Jun 27     #>  8 Europe/… 2024-06-27 13:00:00 13:00      2024-06-27 Thu        Thu, Jun 27     #>  9 Europe/… 2024-06-27 13:00:00 13:00      2024-06-27 Thu        Thu, Jun 27     #> 10 Asia/Se… 2024-06-27 20:00:00 20:00      2024-06-27 Thu        Thu, Jun 27     #> 11 Austral… 2024-06-27 21:00:00 21:00      2024-06-27 Thu        Thu, Jun 27  df <- gglobalclocks:::date_time_tz_to_tzs(   from_date_time = \"2024-06-12 20:00:00\",   from_tz = \"Europe/London\",   to_tz = tz_targets) |>    gglobalclocks:::local_tzs_df_collapse()  df #> # A tibble: 8 × 4 #>   locations                local_time local_wday_date location                 #>   <chr>                    <time>     <chr>           <fct>                    #> 1 US/Pacific               12:00      Wed, Jun 12     US/Pacific               #> 2 US/Mountain              13:00      Wed, Jun 12     US/Mountain              #> 3 Santiago; US/Eastern     15:00      Wed, Jun 12     Santiago; US/Eastern     #> 4 Sao_Paulo                16:00      Wed, Jun 12     Sao_Paulo                #> 5 London                   20:00      Wed, Jun 12     London                   #> 6 Amsterdam; Paris; Vienna 21:00      Wed, Jun 12     Amsterdam; Paris; Vienna #> 7 Asia/Seoul               04:00      Thu, Jun 13     Asia/Seoul               #> 8 Melbourne                05:00      Thu, Jun 13     Melbourne  df |>     ggplot() +    gglobalclocks:::stamp_workday() +   aes(local_time, fct_inorder(locations)) +    geom_point() +   geom_text(aes(label = local_time)) +    aes(color = local_wday_date) library(tidyverse) library(lubridate)"},{"path":[]},{"path":"/index.html","id":"time_to_local","dir":"","previous_headings":"Part II. Functions discussion and definitions","what":"time_to_local()","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"One helper function translation one time zone multiple time zones time_to_local. working global clocks, seems like can’t keep date-times different time zones one vector (variable), need conversion one one save character version complete time zone information.","code":"time_to_local <- function(x, tz){   lubridate::with_tz(x, tz = tz) %>%     as.character() }"},{"path":"/index.html","id":"date_time_tz_to_tzs","dir":"","previous_headings":"Part II. Functions discussion and definitions","what":"date_time_tz_to_tzs()","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"can use converter translate ‘’ location time bunch locations’ local times. add helpful columns like local_time, local_date etc.","code":"date_time_tz_to_tzs <- function(from_date_time = \"2024-03-27 12:00:00\",                                  from_tz = \"US/Mountain\",                                  to_tz = c(\"Europe/Paris\",                                            \"Europe/Amsterdam\",                                            \"Australia/Adelaide\",                                           \"Australia/Melbourne\",                                            \"Europe/Stockholm\",                                            \"US/Eastern\",                                           \"Europe/London\",                                            \"US/Pacific\",                                           \"US/Mountain\",                                            \"US/Central\",                                            \"Australia/Sydney\",                                           \"Europe/Vienna\",                                           \"America/Sao_Paulo\",                                           \"America/Santiago\",                                           \"America/Buenos_Aires\")){     meeting <- ymd_hms(from_date_time,                        tz = from_tz)  OlsonNames() %>%   data.frame(tz = .) %>%   dplyr::filter(tz != \"US/Pacific-New\") %>%   dplyr::filter(tz %in% to_tz) %>%   dplyr::mutate(local_date_time_chr = purrr::map2(meeting, tz, time_to_local))  %>%   tidyr::unnest(local_date_time_chr) %>%   dplyr::mutate(local_time_date_utc =                    lubridate::ymd_hms(local_date_time_chr, tz = \"UTC\"))  %>%    dplyr::mutate(local_time = lubridate::ymd_hms(local_date_time_chr))  %>%    dplyr::mutate(local_time = hms::as_hms(local_time)) %>%   dplyr::mutate(local_date = as.Date(local_date_time_chr)) %>%   dplyr::mutate(local_wday = lubridate::wday(local_date, label = T)) %>%   dplyr::arrange(local_date, local_time) %>%   dplyr::select(-local_date_time_chr) %>%   dplyr::mutate(local_wday_date = paste0(local_wday, \", \", month(local_date, label = T), \" \", day(local_date)))  } date_time_tz_to_tzs() |>   head() #> # A tibble: 6 × 6 #>   tz        local_time_date_utc local_time local_date local_wday local_wday_date #>   <chr>     <dttm>              <time>     <date>     <ord>      <chr>           #> 1 US/Pacif… 2024-03-27 11:00:00 11:00      2024-03-27 Wed        Wed, Mar 27     #> 2 US/Mount… 2024-03-27 12:00:00 12:00      2024-03-27 Wed        Wed, Mar 27     #> 3 US/Centr… 2024-03-27 13:00:00 13:00      2024-03-27 Wed        Wed, Mar 27     #> 4 US/Easte… 2024-03-27 14:00:00 14:00      2024-03-27 Wed        Wed, Mar 27     #> 5 America/… 2024-03-27 15:00:00 15:00      2024-03-27 Wed        Wed, Mar 27     #> 6 America/… 2024-03-27 15:00:00 15:00      2024-03-27 Wed        Wed, Mar 27"},{"path":"/index.html","id":"local_tzs_df_collapse","dir":"","previous_headings":"Part II. Functions discussion and definitions","what":"local_tzs_df_collapse()","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"turns multiple tz local meeting time, can collapse locations local time. type information might send attendees list can know, glance, likelihood making attending work.","code":"local_tzs_df_collapse <- function(local_tzs_df, collapse = \"; \"){      local_tzs_df |>     group_by(local_date, local_time, local_wday_date) |>     summarise(locations = paste(tz, collapse = collapse)) |>     ungroup() |>     select(locations, everything()) |>     mutate(locations = str_remove_all(locations, \"Europe/|America/|Australia/\")) |>     arrange(local_date, local_time) |>     mutate(location = fct_inorder(locations)) |>     select(-local_date)    } date_time_tz_to_tzs() |>    local_tzs_df_collapse() |>    head() #> `summarise()` has grouped output by 'local_date', 'local_time'. You can #> override using the `.groups` argument. #> # A tibble: 6 × 4 #>   locations                         local_time local_wday_date location          #>   <chr>                             <time>     <chr>           <fct>             #> 1 US/Pacific                        11:00      Wed, Mar 27     US/Pacific        #> 2 US/Mountain                       12:00      Wed, Mar 27     US/Mountain       #> 3 US/Central                        13:00      Wed, Mar 27     US/Central        #> 4 US/Eastern                        14:00      Wed, Mar 27     US/Eastern        #> 5 Buenos_Aires; Santiago; Sao_Paulo 15:00      Wed, Mar 27     Buenos_Aires; Sa… #> 6 London                            18:00      Wed, Mar 27     London"},{"path":"/index.html","id":"more-charming-display","dir":"","previous_headings":"","what":"More charming display…","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"can course display nicer way, passing html table maker example.","code":"date_time_tz_to_tzs() |>    local_tzs_df_collapse() |>    knitr::kable() #> `summarise()` has grouped output by 'local_date', 'local_time'. You can #> override using the `.groups` argument."},{"path":"/index.html","id":"lets-build-a-wall-of-global-clocks-with-base-ggplot2","dir":"","previous_headings":"","what":"Let’s build a wall of global clocks with base ggplot2","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"","code":"date_time_tz_to_tzs() |>    local_tzs_df_collapse() |>   mutate(minute_turn = local_time %>%             lubridate::minute() %% 60 / 60) %>%    mutate(hour_turn = local_time %>%             lubridate::hour() %% 12/12 + minute_turn/12) %>%    mutate(am_pm = ifelse(local_time %>% lubridate::hour() >= 12, \"pm\", \"am\")) %>%    ggplot() +    facet_wrap(~ str_wrap(locations, 15)) +    aes(x =  hour_turn,        xend =  hour_turn,       y = 0,       yend = .6,       color = am_pm) +    labs(color = NULL) +   geom_segment() +    geom_segment(aes(x =  minute_turn,                    xend =  minute_turn ,                yend = 1) ) +    coord_polar() +    scale_x_continuous(limits = c(0,1)) +    geom_text(data = tibble(x = 1:12, y = 1),              aes(label = x, x = x/12, y = y, xend = NULL,                  yend = NULL, color = NULL),             show.legend = F) +    theme_void() +    annotate(geom = \"segment\", x = 0, xend = 1, y = 1.2, yend = 1.2) #> `summarise()` has grouped output by 'local_date', 'local_time'. You can #> override using the `.groups` argument."},{"path":[]},{"path":"/index.html","id":"gglobalclocks-1","dir":"","previous_headings":"Speed things up by putting some of this into functions","what":"gglobalclocks()","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"","code":"gglobalclocks <- function(data = NULL){      ggplot2::ggplot(data) +    list(ggplot2::theme_void(),        ggplot2::coord_polar(),        ggplot2::scale_x_continuous(limits = c(0,1)),        ggplot2::scale_y_continuous(limits = c(0,1.3)))    }"},{"path":"/index.html","id":"stamp_clockface","dir":"","previous_headings":"Speed things up by putting some of this into functions","what":"stamp_clockface()","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"","code":"stamp_clockface <- function(){        list(ggplot2::geom_text(data = data.frame(x = 1:12, y = 1),              ggplot2::aes(label = x, x = x/12, y = y, xend = NULL,                  yend = NULL, color = NULL, local_time = NULL),             show.legend = F),           ggplot2::annotate(geom = \"segment\", x = 0, xend = 1, y = 1.2, yend = 1.2)               )    } gglobalclocks() + stamp_clockface()"},{"path":"/index.html","id":"statclockhourhand","dir":"","previous_headings":"Speed things up by putting some of this into functions","what":"statClockhourhand","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"","code":"# there's probably a lot of fun to be had refactoring this! # seems quite verbose compute_clock_hands <- function(data){      data |>    dplyr::mutate(minute_turn = local_time %>% lubridate::minute() %% 60 / 60) |>    dplyr::mutate(hour_turn = local_time %>% lubridate::hour() %% 12/12 + minute_turn/12) |>   dplyr::mutate(am_pm = ifelse(local_time %>% lubridate::hour() > 12, \"pm\", \"am\"))     }  compute_hour_hand <- function(data, scales){      data |>     compute_clock_hands() |>     dplyr::mutate(x =  hour_turn,        xend =  hour_turn,       y = 0,       yend = .6)    }  compute_minute_hand <- function(data, scales){      data |>     compute_clock_hands() |>     dplyr::mutate(x =  minute_turn,        xend =  minute_turn,       # color = am_pm,        y = 0,       yend = 1)    }   statClockminhand <- ggplot2::ggproto(`_class` = \"statClockminhand\",                           `_inherit` = ggplot2::Stat,                           # required_aes = c(\"local_time\"),                           compute_group = compute_minute_hand,                           default_aes = ggplot2::aes(color =                                                             ggplot2::after_stat(am_pm))                            )  geom_minute_hand <- function(   mapping = NULL,   data = NULL,   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE, ...) {   ggplot2::layer(     stat = statClockminhand,  # proto object from step 2     geom = ggplot2::GeomSegment,  # inherit other behavior     data = data,     mapping = mapping,     position = position,     show.legend = show.legend,     inherit.aes = inherit.aes,     params = list(na.rm = na.rm, ...)   ) }  statClockhourhand <- ggplot2::ggproto(`_class` = \"statClockhourhand\",                           `_inherit` = ggplot2::Stat,                           # required_aes = c(\"local_time\"),                           compute_group = compute_hour_hand,                           default_aes = ggplot2::aes(color =                                                             ggplot2::after_stat(am_pm))                            ) date_time_tz_to_tzs() |> compute_clock_hands() #> # A tibble: 15 × 9 #>    tz       local_time_date_utc local_time local_date local_wday local_wday_date #>    <chr>    <dttm>              <time>     <date>     <ord>      <chr>           #>  1 US/Paci… 2024-03-27 11:00:00 11:00      2024-03-27 Wed        Wed, Mar 27     #>  2 US/Moun… 2024-03-27 12:00:00 12:00      2024-03-27 Wed        Wed, Mar 27     #>  3 US/Cent… 2024-03-27 13:00:00 13:00      2024-03-27 Wed        Wed, Mar 27     #>  4 US/East… 2024-03-27 14:00:00 14:00      2024-03-27 Wed        Wed, Mar 27     #>  5 America… 2024-03-27 15:00:00 15:00      2024-03-27 Wed        Wed, Mar 27     #>  6 America… 2024-03-27 15:00:00 15:00      2024-03-27 Wed        Wed, Mar 27     #>  7 America… 2024-03-27 15:00:00 15:00      2024-03-27 Wed        Wed, Mar 27     #>  8 Europe/… 2024-03-27 18:00:00 18:00      2024-03-27 Wed        Wed, Mar 27     #>  9 Europe/… 2024-03-27 19:00:00 19:00      2024-03-27 Wed        Wed, Mar 27     #> 10 Europe/… 2024-03-27 19:00:00 19:00      2024-03-27 Wed        Wed, Mar 27     #> 11 Europe/… 2024-03-27 19:00:00 19:00      2024-03-27 Wed        Wed, Mar 27     #> 12 Europe/… 2024-03-27 19:00:00 19:00      2024-03-27 Wed        Wed, Mar 27     #> 13 Austral… 2024-03-28 04:30:00 04:30      2024-03-28 Thu        Thu, Mar 28     #> 14 Austral… 2024-03-28 05:00:00 05:00      2024-03-28 Thu        Thu, Mar 28     #> 15 Austral… 2024-03-28 05:00:00 05:00      2024-03-28 Thu        Thu, Mar 28     #> # ℹ 3 more variables: minute_turn <dbl>, hour_turn <dbl>, am_pm <chr> date_time_tz_to_tzs() |> compute_minute_hand() #> # A tibble: 15 × 13 #>    tz       local_time_date_utc local_time local_date local_wday local_wday_date #>    <chr>    <dttm>              <time>     <date>     <ord>      <chr>           #>  1 US/Paci… 2024-03-27 11:00:00 11:00      2024-03-27 Wed        Wed, Mar 27     #>  2 US/Moun… 2024-03-27 12:00:00 12:00      2024-03-27 Wed        Wed, Mar 27     #>  3 US/Cent… 2024-03-27 13:00:00 13:00      2024-03-27 Wed        Wed, Mar 27     #>  4 US/East… 2024-03-27 14:00:00 14:00      2024-03-27 Wed        Wed, Mar 27     #>  5 America… 2024-03-27 15:00:00 15:00      2024-03-27 Wed        Wed, Mar 27     #>  6 America… 2024-03-27 15:00:00 15:00      2024-03-27 Wed        Wed, Mar 27     #>  7 America… 2024-03-27 15:00:00 15:00      2024-03-27 Wed        Wed, Mar 27     #>  8 Europe/… 2024-03-27 18:00:00 18:00      2024-03-27 Wed        Wed, Mar 27     #>  9 Europe/… 2024-03-27 19:00:00 19:00      2024-03-27 Wed        Wed, Mar 27     #> 10 Europe/… 2024-03-27 19:00:00 19:00      2024-03-27 Wed        Wed, Mar 27     #> 11 Europe/… 2024-03-27 19:00:00 19:00      2024-03-27 Wed        Wed, Mar 27     #> 12 Europe/… 2024-03-27 19:00:00 19:00      2024-03-27 Wed        Wed, Mar 27     #> 13 Austral… 2024-03-28 04:30:00 04:30      2024-03-28 Thu        Thu, Mar 28     #> 14 Austral… 2024-03-28 05:00:00 05:00      2024-03-28 Thu        Thu, Mar 28     #> 15 Austral… 2024-03-28 05:00:00 05:00      2024-03-28 Thu        Thu, Mar 28     #> # ℹ 7 more variables: minute_turn <dbl>, hour_turn <dbl>, am_pm <chr>, x <dbl>, #> #   xend <dbl>, y <dbl>, yend <dbl>"},{"path":"/index.html","id":"geom_clock_hands","dir":"","previous_headings":"Speed things up by putting some of this into functions","what":"geom_clock_hands()","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"","code":"geom_hour_hand <- function(   mapping = NULL,   data = NULL,   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE, ...) {   ggplot2::layer(     stat = statClockhourhand,  # proto object from step 2     geom = ggplot2::GeomSegment,  # inherit other behavior     data = data,     mapping = mapping,     position = position,     show.legend = show.legend,     inherit.aes = inherit.aes,     params = list(na.rm = na.rm, ...)   ) }   geom_clock_hands <- function(...){      list(geom_hour_hand(...),        geom_minute_hand(...))    }"},{"path":"/index.html","id":"try-it-out","dir":"","previous_headings":"Speed things up by putting some of this into functions","what":"Try it out","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"","code":"date_time_tz_to_tzs() |>   local_tzs_df_collapse() |> gglobalclocks() +   aes(local_time = local_time) +   stamp_clockface() +   geom_minute_hand() +   geom_hour_hand() +   facet_wrap(~locations) #> `summarise()` has grouped output by 'local_date', 'local_time'. You can #> override using the `.groups` argument. date_time_tz_to_tzs() |>    local_tzs_df_collapse() |>   gglobalclocks() +    aes(local_time = local_time) +    stamp_clockface() +    geom_clock_hands() +    facet_wrap(~locations) #> `summarise()` has grouped output by 'local_date', 'local_time'. You can #> override using the `.groups` argument. readme2pkg::chunk_to_r(\"gglobalclocks\") readme2pkg::chunk_to_r(\"stamp_clockface\")  readme2pkg::chunk_to_r(\"statClockhourhand\") readme2pkg::chunk_to_r(\"geom_clock_hands\")"},{"path":[]},{"path":"/index.html","id":"stamp_workday","dir":"","previous_headings":"If a wall of clocks is unhelpful in scheduling, can we viz in a different way? Towards LocationXLocaTime plot","what":"stamp_workday()","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"’ll use ‘stamp’ (annotation) layer helps us get oriented 12 hours work day.","code":"create_day_schedule_df <- function(){      data.frame(time_start =                 hms::as_hms(c(\"00:00:00\",\"07:00:00\", \"09:00:00\", \"17:00:00\",\"21:00:00\")),               time_end =                 hms::as_hms(c(\"07:00:00\",\"09:00:00\", \"17:00:00\", \"21:00:00\",\"24:00:00\")),              stance = c(\"avoid\",\"awake\", \"business\",\"awake\",\"avoid\")) }   stamp_workday <- function(show.legend = T){        ggplot2::geom_rect(data = create_day_schedule_df(),             ggplot2::aes(xmin = time_start,                 xmax = time_end,                  x = NULL,                 fill = stance,                 ymin = -Inf,                 ymax = Inf,                 y = NULL,                 color = NULL),            alpha = .5, show.legend = show.legend)  } readme2pkg::chunk_to_r(chunk_name = \"stamp_workday\")"},{"path":"/index.html","id":"locationxlocaltime","dir":"","previous_headings":"","what":"LocationXLocalTime","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"","code":"date_time_tz_to_tzs() |>    local_tzs_df_collapse() |>     ggplot() +    aes(local_time, fct_rev(fct_inorder(str_wrap(locations,25)))) +    labs(x = \"Local meet time\", y = NULL) +    stamp_workday() +   geom_point() +    geom_text(aes(label = local_time),             hjust = -.1, show.legend = F) +    geom_vline(xintercept = hms::as_hms(\"12:00:00\"),               linetype = \"dashed\", color = \"grey25\",               alpha = .2) +   aes(color = local_wday_date) +   labs(color = \"Local meet date\") +   theme(legend.position = \"top\",          legend.justification = \"left\") +    theme(panel.grid.major.y = element_blank(),         panel.grid.minor.y = element_line(color = \"\")) #> `summarise()` has grouped output by 'local_date', 'local_time'. You can #> override using the `.groups` argument."},{"path":[]},{"path":[]},{"path":"/index.html","id":"bit-a-created-package-archetecture-running-devtoolscreate-in-interactive-session-","dir":"","previous_headings":"Phase 1. Minimal working package","what":"Bit A. Created package archetecture, running devtools::create(\".\") in interactive session. ✅","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"","code":"devtools::create(\".\")"},{"path":"/index.html","id":"bit-b-added-roxygen-skeleton-","dir":"","previous_headings":"Phase 1. Minimal working package","what":"Bit B. Added roxygen skeleton? 🚧","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"Use roxygen skeleton auto documentation making sure proposed functions exported. Generally, early , don’t much (anything) terms filling skeleton documentation, things may change.","code":""},{"path":"/index.html","id":"bit-c-managed-dependencies--","dir":"","previous_headings":"Phase 1. Minimal working package","what":"Bit C. Managed dependencies ? 🚧","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"Package dependencies managed, .e. depend::function() proposed functions declared DESCRIPTION","code":"usethis::use_package(\"dplyr\") usethis::use_package( \"hms\") usethis::use_package( \"lubridate\") usethis::use_package( \"purrr\") usethis::use_package( \"tidyr\")"},{"path":"/index.html","id":"bit-d-moved-functions-r-folder-","dir":"","previous_headings":"Phase 1. Minimal working package","what":"Bit D. Moved functions R folder? ✅","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"Use new {readme2pkg} function readme…","code":"readme2pkg::chunk_to_r(\"date_time_tz_to_tzs\") readme2pkg::chunk_to_r(\"local_tzs_df_collapse\") readme2pkg::chunk_to_r(\"time_to_local\")"},{"path":"/index.html","id":"bit-e-run-devtoolscheck-and-addressed-errors-","dir":"","previous_headings":"Phase 1. Minimal working package","what":"Bit E. Run devtools::check() and addressed errors. 🚧","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"","code":"devtools::check(pkg = \".\")"},{"path":"/index.html","id":"bit-f-build-package--","dir":"","previous_headings":"Phase 1. Minimal working package","what":"Bit F. Build package 🚧 ✅","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"","code":"devtools::build()"},{"path":"/index.html","id":"bit-g-write-traditional-readme-that-uses-built-package-also-serves-as-a-test-of-build-","dir":"","previous_headings":"Phase 1. Minimal working package","what":"Bit G. Write traditional README that uses built package (also serves as a test of build. ✅","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"goal {ggchalkboard} package make easy theme ggplots like chalkboards Install package : functions exported can remove go two colons, things really finalized, go without colons (rearrange readme…)","code":"remotes::install_github(\"EvaMaeRey/ggchalkboard\") library(gglobalclocks)    gglobalclocks:::date_time_tz_to_tzs(\"2024-03-06 11:00:00\",                                      from_tz = \"US/Mountain\",                                     to_tz = c(\"US/Eastern\",                                               \"US/Mountain\",                                               \"US/Pacific\",                                               \"Europe/Paris\"))"},{"path":"/index.html","id":"bit-h-chosen-a-license-","dir":"","previous_headings":"Phase 1. Minimal working package","what":"Bit H. Chosen a license? ✅","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"","code":"usethis::use_mit_license()"},{"path":"/index.html","id":"bit-i-add-lifecycle-badge-experimental-","dir":"","previous_headings":"Phase 1. Minimal working package","what":"Bit I. Add lifecycle badge (experimental) ✅","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"","code":"usethis::use_lifecycle_badge(\"experimental\")"},{"path":"/index.html","id":"phase-2-listen--iterate-","dir":"","previous_headings":"","what":"Phase 2: Listen & iterate 🚧","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"Try get feedback experts API, implementation, default decisions. already work solves problem?","code":""},{"path":[]},{"path":[]},{"path":"/index.html","id":"bit-b-written-formal-tests-of-functions-and-save-to-test-that-folders-","dir":"","previous_headings":"Phase 3: Let things settle","what":"Bit B. Written formal tests of functions and save to test that folders 🚧","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"look like …","code":"library(testthat)  test_that(\"calc times 2 works\", {   expect_equal(times_two(4), 8)   expect_equal(times_two(5), 10)    }) readme2pkg::chunk_to_tests_testthat(\"test_calc_times_two_works\")"},{"path":[]},{"path":[]},{"path":[]},{"path":"/index.html","id":"bit-a-package-website-built-","dir":"","previous_headings":"Phase 4. Promote to wider audience…","what":"Bit A. Package website built? ✅","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"","code":"usethis::use_pkgdown() pkgdown::build_site()"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"/index.html","id":"edit-description-file","dir":"","previous_headings":"","what":"Edit Description file","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"","code":"readLines(\"DESCRIPTION\") #>  [1] \"Package: gglobalclocks\"                                                             #>  [2] \"Title: Create a Wall of Clocks with the Local Times for Locations Around the World\" #>  [3] \"Version: 0.0.0.9000\"                                                                #>  [4] \"Authors@R: \"                                                                        #>  [5] \"    person(given = \\\"Gina\\\",\"                                                       #>  [6] \"           family = \\\"Reynolds\\\",\"                                                  #>  [7] \"           role = c(\\\"aut\\\", \\\"cre\\\"),\"                                             #>  [8] \"           email = \\\"first.last@example.com\\\",\"                                     #>  [9] \"           comment = c(ORCID = \\\"YOUR-ORCID-ID\\\"))\"                                 #> [10] \"Description: What the package does (one paragraph).\"                                #> [11] \"License: MIT + file LICENSE\"                                                        #> [12] \"Encoding: UTF-8\"                                                                    #> [13] \"LazyData: true\"                                                                     #> [14] \"Roxygen: list(markdown = TRUE)\"                                                     #> [15] \"RoxygenNote: 7.1.1\"                                                                 #> [16] \"Imports: \"                                                                          #> [17] \"    dplyr,\"                                                                         #> [18] \"    hms,\"                                                                           #> [19] \"    lubridate,\"                                                                     #> [20] \"    purrr,\"                                                                         #> [21] \"    tidyr\""},{"path":"/index.html","id":"environment","dir":"","previous_headings":"","what":"Environment","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"just want print packages versions","code":"all <- sessionInfo() |> print() |> capture.output() all[11:20] #>  [1] \"\"                                                                          #>  [2] \"attached base packages:\"                                                   #>  [3] \"[1] stats     graphics  grDevices utils     datasets  methods   base     \" #>  [4] \"\"                                                                          #>  [5] \"other attached packages:\"                                                  #>  [6] \" [1] lubridate_1.9.2      forcats_1.0.0        stringr_1.5.0       \"       #>  [7] \" [4] dplyr_1.1.0          purrr_1.0.1          readr_2.1.4         \"       #>  [8] \" [7] tidyr_1.3.0          tibble_3.2.1         ggplot2_3.4.4.9000  \"       #>  [9] \"[10] tidyverse_2.0.0.9000\"                                                 #> [10] \"\""},{"path":"/index.html","id":"devtoolscheck-report","dir":"","previous_headings":"","what":"devtools::check() report","title":"Create a Wall of Clocks with the Local Times for Locations Around the World","text":"gglobalclocks syntax look like using approach jumping point?","code":"devtools::check(pkg = \".\")"}]
